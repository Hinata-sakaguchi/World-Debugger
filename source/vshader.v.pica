; Uniforms
.fvec projection[4], view[4], world[4]

; Constants
.constf myconst(0.0, 1.0, -1.0, -0.5)
.alias  zeros myconst.xxxx ; Vector full of zeros
.alias  ones  myconst.yyyy ; Vector full of ones
.alias  half  myconst.wwww

.constf attenuation(0.01, 0.01, 0.01, 0.0)

; Outputs
.out outpos position
.out outtc0 texcoord0
.out outclr color
.out outview view
.out outnq normalquat

; Inputs (defined as aliases for convenience)
.alias inpos v0
.alias intex v1
.alias innrm v2

.proc main
    ; Force the w component of inpos to be 1.0
    mov r0.xyz, inpos
    mov r0.w,   ones

    ; r1 = modelView * inpos
    dp4 r1.x, world[0], r0
    dp4 r1.y, world[1], r0
    dp4 r1.z, world[2], r0
    dp4 r1.w, world[3], r0

    ; outview = -r1
    mov outview, -r1

    ; r2 = modelView * r1
    dp4 r2.x, view[0], r1
    dp4 r2.y, view[1], r1
    dp4 r2.z, view[2], r1
    dp4 r2.w, view[3], r1

    ; outpos = projection * r2
    dp4 outpos.x, projection[0], r2
    dp4 outpos.y, projection[1], r2
    dp4 outpos.z, projection[2], r2
    dp4 outpos.w, projection[3], r2

    ; outtex = intex
    mov outtc0, intex

    ; normalize(view * innrm)
    dp3 r14.x, world[0], innrm
    dp3 r14.y, world[1], innrm
    dp3 r14.z, world[2], innrm
    dp3 r6.x, r14, r14
    rsq r6.x, r6.x
    mul r14.xyz, r14.xyz, r6.x

    ; r0 = {1, 0, 0, 0}
    mov r0, myconst.xyyx

    ; r4 = {1, 1, 1, 1} + r14.zzzz
    ; r4 *= 0.5
    add r4, ones, r14.zzzz
    mul r4, half, r4

    ; cmp = (0 > r4.x)
    cmp zeros, ge, ge, r4.x

    ; r4.xyzw = 1 / sqrt(r4.x)
    rsq r4, r4.x

    ; r5 = 0.5 * r14
    mul r5, half, r14

    ; if(cmp) goto degenerate
    jmpc cmp.x, degenerate

    ; r0.z = 1 / r4.x
    ; r0.xy = r5.xy * r4.xy
    rcp r0.z, r4.x
    mul r0.xy, r5, r4

degenerate:
    mov outnq, r0
    mov outclr.xyz, ones
    mov outclr.w, ones

    ; We're finished
    end
.end