; ===== renew.exe V2.00 Windows 10/11 用 Kenjiy ======
;
; Cのソースファイルの文書整形
;
; C用ソース ファイルを見やすく整える
; このファイルの行の最初に';'があればコメントとして処理する
;
; renew.exe  実行ファイル
; renew.ini  条件ファイル(無い場合は,プログラム起動時新規作成する)
;
; 使い方
; 実行     :  renew.exe<Enter> <--- 最初に実行
; 書式     :  file_name <-parameter>
;                ↑            ↑parameter: オプションパラメータ(iniソースより優先する,省略可能)
;                ↑file_name: Cのソースファイル.(省略できない) '*','?'が使用可能
;
; 起動時に下記書式のparameterを指定するとこのiniファイルより優先するので一時的に変更したい時に有効
; parameterを複数指定する時は,ｽﾍﾟｰｽで区切って指定する事
; 例 renew.exe *.cpp -f33
;                     ↑↑
;                     ↑ ソース名の処理 0:検査のみ, 1:ソース名は変わらず,ソースを整形し +.newを新規に作る
;                     ↑             2:ソースファイル整形し､古いソース名を+.old, 3:ソース整形し,oldを作らない
;                     ファイルを 0:自動 1:Shift JIS, 2:utf8, 3:utf8(BOM付き) にする
; 例 renew.exe *.c -m0
;                   ↑while(){} の'{'〜'}'の縦の位置を0:文書整形のみする
;                   行の処理 0:何もしない
; 例 renew.exe *.h -b2
;                   ↑#if, #else, #endif のTABを調正する(TABがずれた時の確認用) 1:TAB調整
;                   ソース名をリネームして+.oldとし,ソースファイルを整形する
; 例 renew.exe *.h -m1
;                   ↑
;                  コメント行の処理 1:ﾌﾟﾛｸﾞﾗﾑの場合は調整する+TABを揃える
; debug_modeの使い方 範囲は 1〜9。renew_debug.txt と renew_debug2.txt が作られる
; 例 renew.exe *.c -z9
;                   ↑
;                  debugで記録する明細表示
; 例 renew.exe *.c -z1
;                   ↑
;                   tab_stack番号表示(どこでTABがずれたか分かる)
;
;----------------- 初期値 --;---------------説明 ---------------------------------------------------------
global_int_tab      2       ; '-b?' ｸﾞﾛｰﾊﾞﾙ変数のint, char, long, unsignedの第一定義のTAB位置(?=0〜40)
                            ;      0:何もしない, 1:TABなし(ｽﾍﾟｰｽのみ), 2:自動でTAB作成, 3〜:最大TAB位置
                            ;      例 -b1
                            ;         0---1---2- TAB位置   ---> 0---1---2---3---4---5---6
                            ;         int      abcd1;      ---> int abcd1;
                            ;         char   abcd2;        ---> char abcd2;
                            ;         unsigned long abcd3; ---> unsigned long abcd3;
                            ;      例 -b2
                            ;         0---1---2- TAB位置   ---> 0---1---2---3---4---5---6
                            ;         int abcd1;           ---> int             abcd1;
                            ;         char abcd2;          ---> char            abcd2;
                            ;         unsigned long abcd3; ---> unsigned long   abcd3;
                            ;      例 -b3
                            ;         0---1---2- TAB位置   ---> 0---1---2---3---4---5---6
                            ;         int abcd1;           ---> int         abcd1;
                            ;         char abcd2;          ---> char        abcd2;
                            ;         unsigned long abcd3; ---> unsigned long abcd3;
                            ;      例 -b6
                            ;         0---1---2- TAB位置   ---> 0---1---2---3---4---5---6
                            ;         int abcd1;           ---> int             abcd1;
                            ;         char abcd2;          ---> char            abcd2;
                            ;         unsigned long abcd3; ---> unsigned long   abcd3;

define_tab          2       ; '-c?' #define の第1番目定義と第2番目間定数のTAB位置(?=0〜20)
                            ;      0:何もしない, 1:TABなし(ｽﾍﾟｰｽのみ), 2:自動でTAB作成, 3〜:最小TAB位置
                            ;      例 -c0
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6---
                            ;         #define   ABCD(a) if(a){    ---> #define   ABCD(a) if(a) {
                            ;      例 -c1
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6---
                            ;         #define   ABCD(a) if(a){    ---> #define ABCD( a ) if( a ) {
                            ;         #define Uint unsigned int   ---> #define Uint unsignd int
                            ;         #define ABCD    1000        ---> #define ABCD 1000
                            ;         #define MAX_LENGTH  128     ---> #define MAXLENGTH 128
                            ;      例 -c2
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6---
                            ;         #define   ABCD(a) if(a){    ---> #define ABCD( a )   if( a ) {
                            ;         #define Uint unsigned int   ---> #define Uint        unsignd int
                            ;         #define ABCD    1000        ---> #define ABCD        1000
                            ;         #define MAX_LENGTH  128     ---> #define MAXLENGTH   128
                            ;      例 -c5
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6---
                            ;         #define   ABCD(a) if(a){    ---> #define ABCD( a )   if( a ) {
                            ;         #define Uint unsigned int   ---> #define Uint        unsignd int
                            ;         #define ABCD    1000        ---> #define ABCD        1000
                            ;         #define MAX_LENGTH  128     ---> #define MAXLENGTH   128
                            ;      例 -c6
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6---
                            ;         #define ABCD(a) if(a){      ---> #define ABCD( a )       if( a ) {
                            ;         #define Uint unsigned int   ---> #define Uint            unsignd int
                            ;         #define ABCD    1000        ---> #define ABCD            1000
                            ;         #define MAX_LENGTH  128     ---> #define MAXLENGTH       128

define_com_tab      2       ; '-d?' #define のｺﾒﾝﾄのTAB位置(?=0〜40)
                            ;      0:何もしない, 1:TABなし(ｽﾍﾟｰｽのみ), 2:自動でTAB作成, 3〜:最大TAB位置
                            ;      例 -d1
                            ;         0---1---2---3---4 TAB位置      ---> 0---1---2---3---4---5---6---7
                            ;         #define ABC 1234    // comment ---> #define ABC 1234 // comment
                            ;         #define ABCDEF abcd123 // test ---> #define ABCDEF abcd123 // test
                            ;      例 -d5
                            ;         0---1---2---3---4 TAB位置      ---> 0---1---2---3---4---5---6---7
                            ;         #define ABC 1234 // comment    ---> #define ABC 1234    // comment
                            ;         #define ABCDEF abcd123 // test ---> #define ABCDEF abcd123 // test
                            ;      例 -d20
                            ;         0---1---2---3---4 TAB位置      ---> 0---1---2---3---4---5---6---7
                            ;         #define ABC 1234 // comment    ---> #define ABC 1234        // comment
                            ;         #define ABCDEF abcd123 // test ---> #define ABCDEF abcd123  // test

other_com_tab       30      ; '-e?' #define 以外のｺﾒﾝﾄのTAB位置(?=0〜40)
                            ;      0:何もしない, 1:TABなし(ｽﾍﾟｰｽのみ), 2:最大TAB制限なし, 3〜:最大TAB位置
                            ;      例 -e1
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6
                            ;         a=0;    // test1            ---> a = 0; // test1
                            ;         abcdef1234=0;// test2       ---> abcdef1234 = 0; // test2
                            ;      例 -e3
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6---
                            ;         a=0;    // test1            ---> a = 0;      // test1
                            ;         abcdef1234=0;// test2       ---> abcdef1234 = 0; // test2
                            ;      例 -e20
                            ;         0---1---2---3---4 TAB位置   ---> 0---1---2---3---4---5---6---
                            ;         a=0;    // test1            ---> a = 0;          // test1
                            ;         abcdef1234=0;// test2       ---> abcdef1234 = 0; // test2

format              0       ; '-f??' ソースファイルの整形
                            ;      0:検査のみ
                            ;      1:ソース名は変わらず, ソースファイルを整形し +.newを新規に作る
                            ;      2:ソースファイル整形し､ソース名を+.old, 3:ソースファイル整形しold作らない
                            ;      +10=Shift JIS, +20=utf8, +30:utf8(BOM付き)
                            ;      例 -f31 は 30:+utf8(BOM付き)
                            ;        +1:ソース名は変わらず, ソースファイルを整形し filename.newを新規に作る

local_int_tab       2       ; '-g?' ローカル変数のint, char, long, unsignedの第一定義のTAB位置(?=0〜40)
                            ;      0:何もしない, 1:TABなし(ｽﾍﾟｰｽのみ), 2:自動でTAB作成, 3〜:最大TAB位置
                            ;      例 -g1
                            ;         0---1---2---3- TAB位置   ---> 0---1---2---3---4---5---6
                            ;         void abcd(void)          ---> void abcd(void)
                            ;         {                        ---> {
                            ;             int      abcd1;      --->     int abcd1;
                            ;             char   abcd2;        --->     char abcd2;
                            ;             unsigned long abcd3; --->     unsigned long abcd3;
                            ;      例 -g3
                            ;         0---1---2---3- TAB位置   ---> 0---1---2---3---4---5---6
                            ;         void abcd(void)          ---> void abcd(void)
                            ;         {                        ---> {
                            ;             int      abcd1;      --->     int         abcd1;
                            ;             char   abcd2;        --->     char        abcd2;
                            ;             unsigned long abcd3; --->     unsigned long abcd3;
                            ;      例 -g5
                            ;         0---1---2---3- TAB位置   ---> 0---1---2---3---4---5---6
                            ;         void abcd(void)          ---> void abcd(void)
                            ;         {                        ---> {
                            ;             int      abcd1;      --->     int                 abcd1;
                            ;             char   abcd2;        --->     char                abcd2;
                            ;             unsigned long abcd3; --->     unsigned long       abcd3;

big_kakko_pair      2       ; '-h?' '{'〜'}' 連続の位置
                            ;      0:スペースのみ, 1:左側に揃える(最小TAB=1), 2:自動でTAB作成(ｽﾍﾟｰｽ+TABで合わせる)
                            ;      例 -h0
                            ;       0---1---2---3---4- TAB位置 ---> 0---1---2---3---4---5---6---7---8
                            ;       abcd[] =   {123, 456, 789} ---> abcd[] = { 123, 456, 789 }
                            ;       d[] = {1,2,3 }             ---> d[] = { 1, 2, 3 }
                            ;       ef[] =  { 23, 45, 6789}    ---> ef[] = { 23, 45, 6789 }
                            ;      例 -h1
                            ;       0---1---2---3---4- TAB位置 ---> 0---1---2---3---4---5---6---7---8
                            ;       abcd[] =   {123, 456, 789} ---> abcd[] =    { 123, 456, 789 }
                            ;       d[] = {1,2,3 }             ---> d[] =       { 1, 2, 3 }
                            ;       ef[] =  { 23, 45, 6789}    ---> ef[] =      { 23, 45, 6789 }
                            ;      例 -h2
                            ;       0---1---2---3---4- TAB位置 ---> 0---1---2---3---4---5---6---7---8
                            ;       abcd[] =    {123, 456, 789} ---> abcd[] = { 123, 45, 789  }
                            ;       d[] = {1,2,3 }             ---> d[] =     { 1,   2,  3    }
                            ;       ef[] =  { 23, 45, 6789}    ---> ef[] =    { 23,  45, 6789 }


long_comment        1       ; '-k?' '/*〜*/' 行の処理
                            ;      0:変換しない
                            ;      1:行の最後の '/*〜*/' を'//'に変換
                            ;      2:'/*'で始まる複数行の長い文章までを'//'に変換
                            ;     例 -k1
                            ;         0---1---2---3----4--- TAB位置 ---> 0---1---2---3---4---5
                            ;             abcde= 0;/* test0 */      --->     abcde = 0;  // test0
                            ;             a=b;// test1              --->     a = 0;      // test1
                            ;             //abc(1);//test2          --->     // abc(1);//test2
                            ;      例 -k2
                            ;         0---1---2 TAB位置      ---> 0---1---2---3---4---5---6
                            ;         /*                     ---> //
                            ;           This is sample.      ---> // This is sample.
                            ;           20xx年yy月zz日       ---> // 20xx年yy月zz日
                            ;           char abcd[]={1,2,3}; ---> // char abcd[]={1,2,3};
                            ;         */                     ---> //

comment_prog         1      ; '-m?' '//' 行の処理
                            ;      0:何もしない, 1:ﾌﾟﾛｸﾞﾗﾑの場合は調整するし、TABを揃える
                            ;       例 -m1
                            ;         0---1---2---3----4--- TAB位置 ---> 0---1---2---3---4---5
                            ;             abcde= 0;/* test0 */      --->     abcde = 0;  // test0
                            ;             a=b;// test1              --->     a = 0;      // test1
                            ;        //abc(1);//test2               ---> //  abc( 1 );   //test2
                            ;        ↑'//'位置が先頭+ﾌﾟﾛｸﾞﾗﾑなのでﾌﾟﾛｸﾞﾗﾑとして調整する
                            ;             //abc(1);//test2          --->     // abc(1);//test2
                            ;             ↑'//'位置が先頭でない場合は何もしない
                            ;             b(1); //test3             --->     b( 1 );     // test3
                            ;               //ﾃｽﾄ                   --->     // ﾃｽﾄ
                            ;               ↑'//'位置が前行とそろってない場合,TAB=0とする
                            ;             c(1); //test4             --->     c( 1 );     // test4
                            ;                   //ここはｺﾒﾝﾄ        --->                 // ここはｺﾒﾝﾄ
                            ;                   ↑'//'位置が前行と同じｺﾒﾝﾄ位置の場合,前行にそろえる

kakko_space         0       ; '-n?' 括弧の前後の処理
                            ;      0:連続する括弧の最初と最後はｽﾍﾟｰｽを入れる, 1:括弧の内側はｽﾍﾟｰｽを入れない
                            ;       例 -n0
                            ;         0---1---2---3--- TAB位置   ---> 0---1---2---3---4---5---6
                            ;         if( abc( 1 ) == 0 ) d = 0; ---> if( abc(1) == 0 ) d = 0;
                            ;       例 -n1:
                            ;         0---1---2---3--- TAB位置   ---> 0---1---2---3---4---5---6
                            ;         if( abc( 1 ) == 0 ) d = 0; ---> if(abc(1) == 0) d = 0;

yen                 1       ; '-p?' '\'行の処理
                            ;      0:変更なし, 1:調整する

debug_mode          0       ; '-z?' debug用 0:記録なし
                            ;      1:tab_stack_cnt, 2:deep_cnt, 3:kakko_cnt
                            ;      4:hojo_flag，5:tab_pos, 6:src_line_no，7:src_com_pos
                            ;      8:big_kakko_cnt，9:debug情報表示

